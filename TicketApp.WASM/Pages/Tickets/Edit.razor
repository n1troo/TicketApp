@page "/tickets/edit/{Id}"

@attribute [Authorize(Roles = "Administrator")]

@inject ITicketRepository _repo
@inject ICustomerRepository _authorRepo
@inject NavigationManager _navManager
@inject IToastService _toastService


<h3>Edit Book</h3>
<hr />
<br />
@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid Selection. Please Try Again" />
}
else if (Model == null)
{
    <LoadingMessage Message="Loading ticket Details" />
}
else
{
    <EditForm Model="Model" OnValidSubmit="HandleUpdate">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="title">Title</label>
            <InputText @bind-Value="Model.Title" class="form-control" id="title" />
        </div>
        <div class="form-group">
            <label for="isbn">Summary</label>
            <InputText @bind-Value="Model.Summary" class="form-control" id="isbn" />
        </div>
        <div class="form-group">
            <label for="contact">ContactPerson</label>
            <InputNumber @bind-Value="Model.ContactPerson" class="form-control" id="contact" />
        </div>
        <div class="form-group">
            <label for="customer">Authors</label>
            <select @bind="Model.CustomerId" class="form-control" id="customer">
                <option value="">-- Select Customer --</option>
                @if (Customers != null)
                {
                    foreach (var customer in Customers)
                    {
                        <option value="@customer.Id">@customer.Name @customer.Description</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="summary">Summary</label>
            <InputTextArea @bind-Value="Model.Summary" class="form-control" id="summary" />
        </div>

        <div class="form-group">
            <label for="logo">Customer logo</label>
            @*<InputFile OnChange="HandleFileSelection" />*@
            @if (isInvalidFileType)
            {
                <ErrorMessage Message="Please remove the invalid file type and select as new image, or leave this field blank" />
            }
            @if (!string.IsNullOrWhiteSpace(imageDataURL))
            {
                <img src="@imageDataURL" style="height:100px;width:100px" />
            }
            else if (!string.IsNullOrWhiteSpace(Model.Image))
            {
                <img src="@string.Format("data:image/png;base64,{0}", Model.File)" style="height:100px;width:100px" />
            }
        </div>
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil"></span>
            Submit Changes
        </button>
        <button @onclick="BackToList" class="btn btn-outline-secondary">
            <span class="oi oi-media-skip-backward"></span>
            Back To List
        </button>
    </EditForm>
}

@code{
    [Parameter]
    public string Id { get; set; }

    private Ticket Model = new Ticket();
    private IList<Customer> Customers;

    private IBrowserFile file;
    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private bool isFileChanged = false;
    private string imageDataURL;
    private Stream msFile;

    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        Model = await _repo.Get(Endpoints.TicketEndpoint, id);
        Customers = await _authorRepo.Get(Endpoints.CustomerEndpoint);
    }

    private async Task HandleUpdate()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

                Model.Image = picName;
                var buffer = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(buffer);
                Model.File = Convert.ToBase64String(buffer);
            }
            else if (isFileChanged && file == null)
            {
                Model.Image = string.Empty;
            }

            isSuccess = await _repo.Update(Endpoints.TicketEndpoint, Model, Model.Id);
            if (isSuccess)
            {
                _toastService.ShowWarning("Ticket Updated Successfully", "");
                BackToList();
            }
        }
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        file = e.File;
        isFileChanged = true;
        if (file != null)
        {
            var ext = Path.GetExtension(file.Name);
            if (ext.Contains("jpg") || ext.Contains("png") || ext.Contains("jpeg"))
            {
                msFile = file.OpenReadStream();

                var resizedImageFile = await file.RequestImageFileAsync("image/png",
            100, 100);

                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);

                var imageBase64Data = Convert.ToBase64String(buffer);
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }


    private void BackToList()
    {
        _navManager.NavigateTo("/tickets/");
    }
}