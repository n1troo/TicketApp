@page "/authors/delete/{Id}"

@attribute [Authorize(Roles = "Administrator")]
@inject ICustomerRepository _repo
@inject NavigationManager _navManager
@inject IToastService _toastService

<h3 class="card-title">Are You Sure You Want to Delete This Record?</h3>
<hr/>
<br/>
@if (!isSuccess)
{
    <ErrorMessage Message="Somewthing Went Wrong WIth the Operation"/>
}

@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid Selection. Please Try Again"/>
}
else if (Model == null)
{
    <LoadingMessage Message="Loading customer details"/>
}
else
{
    <div class="col-md-4">
        <table class="table table-responsive">
            <tr>
                <td>Name</td>
                <td>@Model.Name</td>
            </tr>
            <tr>
                <td>NIP</td>
                <td>@Model.NIP</td>
            </tr>
            <tr>
                <td>Description</td>
                <td>@Model.Description</td>
            </tr>
        </table>
        <br/>
        @if (Model.Ticketks == null || Model.Ticketks.Count < 1)
        {
            <div class="alert alert-dismissible alert-secondary">
                No tickets for this customer
            </div>
        }
        else
        {
            <div class="card" style="width: 18rem;">
                <div class="card-header">
                    <h4>Customer tickets</h4>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var ticket in Model.Ticketks)
                    {
                        <li class="list-group-item">@ticket.Title - @ticket.Summary </li>
                    }
                </ul>
            </div>
        }

    </div>
}
<br/>

<button @onclick="DeleteCustomer" class="btn btn-danger">
    <span class="oi oi-delete"></span>
    Delete Author
</button>

<button @onclick="BackToList" class="btn btn-outline-secondary">
    <span class="oi oi-media-skip-backward"></span>
    Back To List
</button>


@code {

    [Parameter]
    public string Id { get; set; }

    private Customer Model = new();
    private bool isSuccess = true;

    protected override async Task OnInitializedAsync()
    {
        var id = Convert.ToInt32(Id);
        Model = await _repo.Get(Endpoints.CustomerEndpoint, id);
    }

    private async Task DeleteCustomer()
    {
        isSuccess = await _repo.Delete(Endpoints.CustomerEndpoint, Model.Id);
        if (isSuccess)
        {
            _toastService.ShowError("Customer Deleted Successfully");
            BackToList();
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/customers/");
    }

}